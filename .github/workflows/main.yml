# This is a basic workflow to help you get started with  Actions

name: CI to check python
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
          configJson : ${{steps.set_var.outputs.configJson}}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      # Runs a single command using the runners shell
      
        name: Run a one-line script
      - run: echo Hello, world!
      # Runs a set of commands using the runners shell
        
        name : Run a multi-line script
      - run: |
          echo Add other actions to build,
          echo test, and deploy your project.
        id: set_var  
      - name: Extracting json data into workflow 
        
        run: |
          content= cat .github/workflows/config.json
          echo $content
          echo "coverting this to specific format"
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "Post-conversion"
          echo '::set-output name=configJson::${content}' 
          
      - name : Printing the json data
        run : echo "${{steps.set_var.outputs.configJson && fromJSON(steps.set_var.outputs.configJson).name}}"
      - name: Extract Name from config.json
        uses: sergeysova/jq-action@v2
        id: Name
        with:
          cmd: 'jq .name .github/workflows/config.json -r'
          
      - name: Show Name
        run: | 
          names="${{ steps.Name.outputs.value }}"
          echo "$names"
          echo '::set-output name=name-output::${names}'
          echo "$name-output"
        
          
        
        

          
          
          


          

